# Unix
alias mkdir="mkdir -p"
alias rmrf='rm -rf'
alias clear-downloads='rm -rf ~/Downloads/*'
alias t='touch'
alias sds='sh ./drew-scratch.sh'
alias c='clear'
alias x='exit 0'

touchp() { mkdir -p "$(dirname "$1")" && touch "$1" ; }

# Git
alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias gs='git status -sb'
alias gc='git commit'
alias gcm='git commit -m'
alias gcf='git commit --fixup'
alias gcam='git add -A && git commit -m'
alias gca='git commit --amend'
alias gcan='git commit --amend --no-edit'
alias gcaan='git commit -a --amend --no-edit'
alias gp='git push -u origin $(git rev-parse --abbrev-ref HEAD)'
alias ga='git add'
alias gaa='git add -A'
alias grc='GIT_EDITOR=true git rebase --continue'
alias git-delete-backups='git checkout -q master && git branch | grep -E "\-\-backup-\d+$" | xargs git branch -D'
alias git-reset-super='git clean -f -d && git reset --hard'
alias git-show-migration-commits='git log --oneline --follow master..@ -- ./db/migrate'
alias gch='git checkout'
alias gh-deploy-staging='git rev-parse --abbrev-ref HEAD | xargs gh workflow run "Deploy Staging" --ref'
alias gh-inv-pr='gh pr create -r jfranz -b "" -f'
alias gh-draft-pr='gh pr create -b "" -f -d'

function gspum() {
  git stash push -u -m "${1:-tmp}"
}

function git-delete-squashed(){
  if git show-ref --verify --quiet refs/heads/master; then
    rootBranch="master"
  elif git show-ref --verify --quiet refs/heads/main; then
    rootBranch="main"
  else
    echo "Error: Neither master nor main branch exists."
    return 1
  fi
  
  git checkout -q $rootBranch;
  git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base $rootBranch $branch) && [[ $(git cherry $rootBranch $(git commit-tree $(git rev-parse $branch\^{tree}) -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done
}

function gria(){
  git rebase -i @~$1
}

function gri(){
  git rebase -i $1
}

function grb(){
  git rebase -i $1^
}

function git-squash-all-into() {
  git add -A;
  git commit --fixup $1;
  GIT_SEQUENCE_EDITOR=: git rebase -i $1^;
}

function copy-branch() {
  echo "Looking for $1";
  br=`git branch | grep "$1"`;

  # echo "Looking for $1";
  # br=`git branch | grep "$1"`;

  if [[ -z "$br" ]]; then
    echo "No branch matching $1";
  else
    echo "$br" | xargs echo -n | pbcopy;
    echo "Copied $br to clipboard";
  fi
}

# Get a remote branch in local
function git-get-remote() {
  git checkout master;
  git checkout -b $1;
  git fetch origin $1;
  git reset --hard origin/$1;
}

# Node
alias nom='rm -rf node_modules && npm ci'
alias npm-relock='rm -rf node_modules && rm -rf package-lock.json && npm install'
alias ni='node index.js'
alias nds='node drew-scratch.js'
alias nmds='nodemon drew-scratch.js'
alias update-npm-rebase='git reset HEAD package-lock.json && git checkout package-lock.json && npm install && git add -A'
alias update-yarn-rebase='git reset HEAD yarn.lock && git checkout yarn.lock && npm install && git add -A'

# Postgres
alias restart-postgres="rm /usr/local/var/postgres/postmaster.pid; launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist; launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist"
alias snapdb="psql -U postgres -d snap_sandbox_development"

# Ruby
alias install-missing-ruby="brew update && brew upgrade ruby-build && rbenv install"
alias fs='foreman start'
alias frrc='foreman run rails c'
alias beg='bundle exec guard'
alias ber='bundle exec rubocop'
alias berc="git status --porcelain | grep '^\s*[AM?]' | awk '{print \$2}' | xargs bundle exec rubocop -A" # run rubocop on changed/new files
alias r='rails'
alias rdbm='rails db:migrate'
alias rdbms='rails db:migrate:status'
alias update-schema-rebase='git reset HEAD db/schema.rb && git checkout db/schema.rb && rails db:migrate && git add -A'
alias rc='rails console -- --nomultiline'
alias frs='find-rails-schema'

function rdbr(){
  local steps="${1:-"1"}"
  rails db:rollback STEP=$steps
}

# Ember
alias em='npx ember'

# Aptible
alias aptible-login='aptible login --email=drew@invibe.co --lifetime=7d --password=$(op read "op://Private/Aptible/password") --otp-token=$(op read "op://Private/Aptible/one-time password?attribute=otp")'
alias aptible-snap-staging='aptible ssh rails c -r staging-us'
alias aptible-snap-prod='aptible ssh rails c -r production-us'
alias aptible-snap-production='aptible-snap-prod'